import { BaseLanguageModel } from "../base_language/index.js";
import { CallbackManager } from "../callbacks/index.js";
import { Tool } from "../tools/base.js";
import { ChatAgent } from "./chat/index.js";
import { ChatConversationalAgent } from "./chat_convo/index.js";
import { AgentExecutor } from "./executor.js";
import { ZeroShotAgent } from "./mrkl/index.js";
type AgentType = "zero-shot-react-description" | "chat-zero-shot-react-description" | "chat-conversational-react-description";
export declare const initializeAgentExecutor: (tools: Tool[], llm: BaseLanguageModel, _agentType?: AgentType, _verbose?: boolean, _callbackManager?: CallbackManager) => Promise<AgentExecutor>;
type AgentExecutorOptions = ({
    agentType: "zero-shot-react-description";
    agentArgs?: Parameters<typeof ZeroShotAgent.fromLLMAndTools>[2];
} & Omit<Parameters<typeof AgentExecutor.fromAgentAndTools>[0], "agent" | "tools" | "memory">) | ({
    agentType: "chat-zero-shot-react-description";
    agentArgs?: Parameters<typeof ChatAgent.fromLLMAndTools>[2];
} & Omit<Parameters<typeof AgentExecutor.fromAgentAndTools>[0], "agent" | "tools" | "memory">) | ({
    agentType: "chat-conversational-react-description";
    agentArgs?: Parameters<typeof ChatConversationalAgent.fromLLMAndTools>[2];
} & Omit<Parameters<typeof AgentExecutor.fromAgentAndTools>[0], "agent" | "tools">);
export declare const initializeAgentExecutorWithOptions: (tools: Tool[], llm: BaseLanguageModel, options?: AgentExecutorOptions) => Promise<AgentExecutor>;
export {};
